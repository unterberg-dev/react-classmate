import { LoaderCircle } from "lucide-react"
import type { HTMLAttributes, ReactNode } from "react"
import { type RcBaseComponent, type VariantsConfig, convertRcProps, createVariantMap } from "react-classmate"

import { APP_CONFIG } from "#lib/config"
import type { Colors } from "#lib/types"
import { isLinkExternal } from "#lib/utils"

// 1. types
interface ButtonBaseProps {
  $size?: "lg" | "md" | "sm" | "xs"
  $color?: Colors
  $disabled?: boolean
  $loading?: boolean
}

// 2. setup variants
const buttonVariants: VariantsConfig<ButtonBaseProps, ButtonBaseProps> = {
  base: ({ $disabled, $loading }) => `
    transition-colors
    inline-flex items-center justify-center gap-2 
    font-bold
    ${APP_CONFIG.transition.tw}
    ${$disabled ? "opacity-60 cursor-not-allowed" : ""}
    ${$loading ? "opacity-80 pointer-events-none" : ""}
  `,
  variants: {
    $size: {
      xs: "py-1 px-2 rounded text-xs shadow-sm",
      sm: "py-1.5 px-2.5 rounded text-sm shadow-sm",
      md: "py-1.5 px-3 rounded shadow-sm",
      lg: "py-3 px-4 rounded-lg shadow-md",
    },
    $color: {
      primary: ({ $disabled }) => `
        text-lightNeutral 
        bg-primaryDarkNeutral 
        ${!$disabled ? "hover:bg-primary" : ""}
      `,
      secondary: ({ $disabled }) => `
        text-lightNeutral 
        bg-secondaryDarkNeutral 
        ${!$disabled ? "hover:bg-secondary" : ""}
      `,
      success: ({ $disabled }) => `
        text-lightNeutral 
        bg-successDarkNeutral 
        ${!$disabled ? "hover:bg-success" : ""}
      `,
      warning: ({ $disabled }) => `
        text-lightNeutral 
        bg-warningDarkNeutral 
        ${!$disabled ? "hover:bg-warning" : ""}
      `,
      error: ({ $disabled }) => `
        text-lightNeutral 
        bg-errorDarkNeutral 
        ${!$disabled ? "hover:bg-error" : ""}
      `,
      neutral: ({ $disabled }) => `
        text-dark 
        bg-light dark:bg-grayLight 
        ${!$disabled ? "hover:bg-graySuperLight dark:hover:bg-gray" : ""}
      `,
    },
  },
  defaultVariants: {
    $size: "md",
    $color: "primary",
  },
}

// 3. create variant map
const button = createVariantMap({
  elements: ["button", "a"],
  variantsConfig: buttonVariants,
})

// 4 define the react component
interface ButtonProps extends HTMLAttributes<HTMLAnchorElement | HTMLButtonElement> {
  icon?: ReactNode
  link?: string
  type?: "button" | "submit" | "reset"

  // we don't want to expose the classmate props to the user (devs) -> redeclare them here
  size?: ButtonBaseProps["$size"]
  color?: ButtonBaseProps["$color"]
  disabled?: ButtonBaseProps["$disabled"]
  loading?: ButtonBaseProps["$loading"]
}

const Button = ({ children, icon, link, ...buttonProps }: ButtonProps) => {
  // cast types
  const Component = link
    ? (button.a as RcBaseComponent<ButtonBaseProps & HTMLAttributes<HTMLAnchorElement>>)
    : (button.button as RcBaseComponent<ButtonBaseProps & HTMLAttributes<HTMLButtonElement>>)
  const isExternal = isLinkExternal(link)

  const preparedProps = convertRcProps(buttonProps, {
    size: "$size",
    loading: "$loading",
    disabled: "$disabled",
    color: "$color",
  })

  return (
    <Component {...(link ? { href: link, target: isExternal ? "_blank" : "" } : {})} {...preparedProps}>
      {icon}
      {children}
      {buttonProps.loading && <LoaderCircle className="w-4 h-4 animate-spin" />}
    </Component>
  )
}

// 6. export(s)
export default Button
